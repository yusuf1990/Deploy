# -*- coding: utf-8 -*-
"""Untitled36.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KiZuWYYfjUAQ_4euHGty2Rdj4LY18_VA
"""

pip install web3

from web3 import Web3, HTTPProvider

# Set up web3 connection to Celo network
w3 = Web3(Web3.HTTPProvider('https://forno.celo.org'))#Web3(HTTPProvider('https://forno.celo.org'))

# Replace with your contract bytecode and ABI
bytecode ='0x60806040526000805534801561001457600080fd5b50610159806100246000396000f3fe608060405234801561001057600080fd5b50600436106100465760003560e01c806360fe47b11461004b5780636d4ce63c1461009a5780638da5cb5b146100d4575b600080fd5b6100536100e2565b6040518082815260200191505060405180910390f35b61006f6100e8565b6040518082815260200191505060405180910390f35b61008d6100f0565b6040518082815260200191505060405180910390f35b6000809054906101000a900460ff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6040518163ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15056fea2646970667358221220b3aa7e3faa5eb5ec5b5aeb81cf7ea317e752f969ce92769d9f9dc3f3a1422f2564736f6c634300060b0033' #'0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd'

abi = [{'constant': True, 'inputs': [], 'name': 'myFunction', 'outputs': [{'name': '', 'type': 'uint256'}], 'payable': False, 'stateMutability': 'view', 'type': 'function'}]

# Replace with your Celo account private key and address
private_key = private_key
address ='0x471ED56d43579A39b91085921C832eE67ab9e2A8'

# Create a contract instance
MyContract = w3.eth.contract(abi=abi, bytecode=bytecode)

# Estimate the gas cost for deploying the contract
gas_estimate = w3.eth.estimate_gas({'from': address, 'data': bytecode})

# Build the transaction
tx = {
    'from': address,
    'gas': gas_estimate,
    'gasPrice': Web3.to_wei('10', 'gwei'),
    'nonce': w3.eth.get_transaction_count(address),
    'data': bytecode
}

# Sign the transaction
signed_tx = w3.eth.account.sign_transaction(tx, private_key)

# Send the transaction
tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)

# Wait for the transaction to be mined
tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

# Get the deployed contract address
contract_address = tx_receipt.contractAddress

# Create a concise contract instance
from web3.contract import ConciseContract
MyContract = ConciseContract(w3.eth.contract(address=contract_address, abi=abi))

# Example function call on the deployed contract
result = MyContract.myFunction()
print(result)

